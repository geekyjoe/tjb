import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import {
  getAuth,
  onAuthStateChanged,
  updateEmail,
  updatePassword,
  reauthenticateWithCredential,
  EmailAuthProvider,
} from "firebase/auth";
import { getDatabase, ref as dbRef, update, get } from "firebase/database";
import {
  getStorage,
  ref as storageRef,
  uploadBytes,
  getDownloadURL,
} from "firebase/storage";
import {
  Bell,
  Moon,
  Sun,
  User,
  Package,
  Settings,
  LogOut,
  Pencil,
  Save,
  X,
  Cookie,
  Check,
  Laptop,
} from "lucide-react";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "../components/ui/card";
import { Switch } from "../components/ui/switch";
import { Label } from "../components/ui/label";
import { Input } from "../components/ui/input";
import { Button } from "../components/ui/button";
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from "../components/ui/tabs";
import { Toaster } from "../components/ui/toaster";
import { useToast } from "../hooks/use-toast";
import { useTheme } from "../ThemeToggle";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "../components/ui/dropdown-menu";

const Profile = () => {
  const [currentUser, setCurrentUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [uploading, setUploading] = useState(false);
  const [avatarFile, setAvatarFile] = useState(null);
  const navigate = useNavigate();
  const { toast } = useToast();
  const auth = getAuth();

  const [editingField, setEditingField] = useState(null);
  const [userProfile, setUserProfile] = useState({
    name: "",
    email: "",
    phone: "",
    avatarUrl: "",
    userId: "",
  });
  const [tempProfile, setTempProfile] = useState({ ...userProfile });
  const [currentPassword, setCurrentPassword] = useState("");
  const [newPassword, setNewPassword] = useState("");
  
  const [notifications, setNotifications] = useState({
    communication: true,
    marketing: false,
    security: true,
  });
  const [cookiePreferences, setCookiePreferences] = useState({
    essential: true,
    performance: false,
    analytics: false,
    marketing: false,
  });

  const getCookie = (name) => {
    try {
      const value = `; ${document.cookie}`;
      const parts = value.split(`; ${name}=`);
      if (parts.length === 2) {
        return JSON.parse(parts.pop().split(";").shift());
      }
    } catch (error) {
      return null;
    }
    return null;
  };

  const setCookie = (name, value, days = 365) => {
    const date = new Date();
    date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
    document.cookie = `${name}=${JSON.stringify(value)};expires=${date.toUTCString()};path=/;SameSite=Strict`;
  };

  const showToast = (title, description, variant = "default") => {
    toast({
      variant,
      title: title,
      description: description,
    });
  };

  const handleFieldEdit = (field, value) => {
    setTempProfile((prev) => ({ ...prev, [field]: value }));
  };

  const uploadAvatar = async (userId) => {
    if (!avatarFile) return null;

    const storage = getStorage();
    const avatarRef = storageRef(
      storage,
      `avatars/${userId}/${avatarFile.name}`
    );
    await uploadBytes(avatarRef, avatarFile);
    return getDownloadURL(avatarRef);
  };

  const refreshUserData = async (userId) => {
    try {
      const database = getDatabase();
      const userRef = dbRef(database, `users/${userId}`);
      const snapshot = await get(userRef);
      
      if (snapshot.exists()) {
        const userData = snapshot.val();
        return userData;
      }
      return null;
    } catch (error) {
      console.error("Error fetching user data:", error);
      showToast(
        "Error",
        "Failed to fetch user data",
        "error"
      );
      return null;
    }
  };

  const initializeUserProfile = async (authUser) => {
    if (!authUser) return;

    try {
      // Get additional user data from database
      const userData = await refreshUserData(authUser.uid);
      
      // Combine auth user data with database data
      const combinedProfile = {
        userId: authUser.uid,
        name: userData?.name || authUser.displayName || "",
        email: authUser.email || "",
        phone: userData?.phone || authUser.phoneNumber || "",
        avatarUrl: userData?.avatarUrl || authUser.photoURL || "",
        role: userData?.role || "user",
      };

      setUserProfile(combinedProfile);
      setTempProfile(combinedProfile);
      setCurrentUser(authUser);
    } catch (error) {
      console.error("Error initializing user profile:", error);
      showToast(
        "Error",
        "Failed to initialize user profile",
        "error"
      );
    }
  };

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (authUser) => {
      if (authUser) {
        await initializeUserProfile(authUser);
      } else {
        setCurrentUser(null);
        setUserProfile({
          name: "",
          email: "",
          phone: "",
          avatarUrl: "",
          userId: "",
        });
      }
      setLoading(false);
    });

    return () => unsubscribe();
  }, [auth]);

  const handleFieldSave = async (field) => {
    try {
      if (!currentUser) {
        throw new Error("No authenticated user found");
      }

      const database = getDatabase();
      let updates = {};

      // Handle email update
      if (field === "email" && tempProfile.email !== currentUser.email) {
        if (!currentPassword) {
          throw new Error("Current password required to update email");
        }
        const credential = EmailAuthProvider.credential(
          currentUser.email,
          currentPassword
        );
        await reauthenticateWithCredential(currentUser, credential);
        await updateEmail(currentUser, tempProfile.email);
      }

      // Handle password update
      if (field === "password" && newPassword) {
        if (!currentPassword) {
          throw new Error("Current password required to update password");
        }
        const credential = EmailAuthProvider.credential(
          currentUser.email,
          currentPassword
        );
        await reauthenticateWithCredential(currentUser, credential);
        await updatePassword(currentUser, newPassword);
      }

      // Handle avatar update
      if (field === "avatar" && avatarFile) {
        const avatarUrl = await uploadAvatar(currentUser.uid);
        if (avatarUrl) {
          updates.avatarUrl = avatarUrl;
        }
      }

      // Update the specific field
      updates[field] = tempProfile[field];
      updates.updatedAt = new Date().toISOString();

      // Update database
      await update(dbRef(database, `users/${currentUser.uid}`), updates);

      // Refresh user data
      const userData = await refreshUserData(currentUser.uid);
      if (userData) {
        await initializeUserProfile(currentUser);
      }

      setEditingField(null);
      showToast(
        "Profile Updated",
        `Your ${field} has been updated successfully`,
        "success"
      );
    } catch (error) {
      console.error("Error updating profile:", error);
      showToast(
        "Update Failed",
        error.message,
        "error"
      );
    }
  };
  const handleCookieChange = (key, value) => {
    const newPreferences = { ...cookiePreferences, [key]: value };
    setCookiePreferences(newPreferences);
    setCookie("cookiePreferences", newPreferences);
    showToast(
      "Cookie Preferences Updated",
      `${key.charAt(0).toUpperCase() + key.slice(1)} cookies ${value ? "enabled" : "disabled"}`,
      value ? "success" : "default"
    );
  };

  const handleNotificationChange = (key, value) => {
    setNotifications((prev) => ({ ...prev, [key]: value }));
    showToast(
      "Notification Settings Updated",
      `${key.charAt(0).toUpperCase() + key.slice(1)} notifications ${value ? "enabled" : "disabled"}`,
      value ? "success" : "default"
    );
  };

  const { theme, setTheme } = useTheme();

  const handleThemeChange = (newTheme) => {
    setTheme(newTheme);
    showToast("Theme Updated", `Theme switched to ${newTheme} mode`, "success");
  };

  const ThemeSelector = () => (
    <div className="flex items-center justify-between">
      <div className="space-y-0.5">
        <Label className="text-base">Theme</Label>
        <div className="text-sm text-muted-foreground">
          Choose your preferred theme
        </div>
      </div>
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button variant="outline">
            {theme === "light" && "Light"}
            {theme === "dark" && "Dark"}
            {theme === "system" && "System"}
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent align="end">
          <DropdownMenuItem
            className={`${
              theme === "light"
                ? "text-yellow-600 bg-yellow-50 dark:bg-yellow-900/20"
                : ""
            }`}
            onClick={() => handleThemeChange("light")}
          >
            <Sun className="mr-2 h-4 w-4" />
            <span>Light</span>
            {theme === "light" && <Check className="ml-auto h-4 w-4" />}
          </DropdownMenuItem>
          <DropdownMenuItem
            className={`${theme === "dark" ? "text-blue-600 bg-blue-50 dark:bg-blue-900/20" : ""}`}
            onClick={() => handleThemeChange("dark")}
          >
            <Moon className="mr-2 h-4 w-4" />
            <span>Dark</span>
            {theme === "dark" && <Check className="ml-auto h-4 w-4" />}
          </DropdownMenuItem>
          <DropdownMenuItem
            className={`${theme === "system" ? "text-green-600 bg-green-50 dark:bg-green-900/20" : ""}`}
            onClick={() => handleThemeChange("system")}
          >
            <Laptop className="mr-2 h-4 w-4" />
            <span>System</span>
            {theme === "system" && <Check className="ml-auto h-4 w-4" />}
          </DropdownMenuItem>
        </DropdownMenuContent>
      </DropdownMenu>
    </div>
  );

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center space-y-2">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 mx-auto"></div>
          <p>Loading profile...</p>
        </div>
      </div>
    );
  }

  if (!currentUser) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <p>Please log in to view your profile settings.</p>
          <Button
            className="mt-4"
            onClick={() => navigate("/login")}
          >
            Go to Login
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="mx-auto space-y-8">
      <div className="pb-5 p-6 flex items-center gap-2 space-x-2 border-b">
        <img
          src={userProfile.avatarUrl || `https://ui-avatars.com/api/?name=${userProfile.name || 'User'}`}
          alt={userProfile.name || 'User'}
          className="rounded-full w-12 h-12"
        />
        <h2 className="text-xl font-bold mt-2">Hi, {userProfile.name || 'User'}!</h2>
      </div>
      <Toaster richColors/>
      <Card className="border-none dark:bg-transparent">
        <CardHeader>
          <CardTitle>Profile Settings</CardTitle>
          <CardDescription>
            Manage your account settings and preferences
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Tabs defaultValue="profile">
            <TabsList>
              <TabsTrigger value="profile">Profile</TabsTrigger>
              <TabsTrigger value="appearance">Appearance</TabsTrigger>
              <TabsTrigger value="notifications">Notifications</TabsTrigger>
              <TabsTrigger value="cookies">Cookies</TabsTrigger>
            </TabsList>
  
            <TabsContent value="profile" className="space-y-4">
              <div className="space-y-4">
                {Object.entries({
                  name: "Name",
                  phone: "Phone Number",
                }).map(([field, label]) => (
                  <div key={field} className="space-y-2">
                    <Label htmlFor={field}>{label}</Label>
                    <div className="flex gap-2">
                      <Input
                        id={field}
                        value={
                          editingField === field
                            ? tempProfile[field]
                            : userProfile[field]
                        }
                        onChange={(e) => handleFieldEdit(field, e.target.value)}
                        disabled={editingField !== field}
                        className="flex-1"
                      />
                      {editingField === field ? (
                        <div className="space-x-2">
                          <Button
                            onClick={() => handleFieldSave(field)}
                            size="sm"
                          >
                            <Save className="h-4 w-4" />
                          </Button>
                          <Button
                            onClick={() => setEditingField(null)}
                            size="sm"
                            variant="secondary"
                          >
                            <X className="h-4 w-4" />
                          </Button>
                        </div>
                      ) : (
                        <Button
                          onClick={() => setEditingField(field)}
                          size="sm"
                          variant="ghost"
                        >
                          <Pencil className="h-4 w-4" />
                        </Button>
                      )}
                    </div>
                  </div>
                ))}
                <div className="space-y-2">
                  <Label htmlFor="email">Email</Label>
                  <Input
                    id="email"
                    type="email"
                    value={userProfile.email}
                    disabled={true}
                  />
                </div>
              </div>
            </TabsContent>
  
            <TabsContent value="appearance">
              <ThemeSelector />
            </TabsContent>
  
            <TabsContent value="notifications" className="space-y-4">
              {Object.entries({
                communication: "Communication Emails",
                marketing: "Marketing Emails",
                security: "Security Emails",
              }).map(([key, title]) => (
                <div key={key} className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label className="text-base">{title}</Label>
                    <div className="text-sm text-muted-foreground">
                      Receive emails about{" "}
                      {key === "communication"
                        ? "your account activity"
                        : key === "marketing"
                          ? "new products and features"
                          : "your account security"}
                    </div>
                  </div>
                  <Switch
                    checked={notifications[key]}
                    onCheckedChange={(checked) =>
                      handleNotificationChange(key, checked)
                    }
                  />
                </div>
              ))}
            </TabsContent>
  
            <TabsContent value="cookies" className="space-y-4">
              {Object.entries({
                essential: "Essential Cookies",
                performance: "Performance Cookies",
                analytics: "Analytics Cookies",
                marketing: "Marketing Cookies",
              }).map(([key, title]) => (
                <div key={key} className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label className="text-base">{title}</Label>
                    <div className="text-sm text-muted-foreground">
                      {key === "essential"
                        ? "Required for the website to function properly"
                        : key === "performance"
                          ? "Help us improve site speed and user experience"
                          : key === "analytics"
                            ? "Help us understand how visitors interact with our website"
                            : "Used to deliver relevant advertisements"}
                    </div>
                  </div>
                  <Switch
                    checked={cookiePreferences[key]}
                    onCheckedChange={(checked) =>
                      handleCookieChange(key, checked)
                    }
                    disabled={key === "essential"}
                  />
                </div>
              ))}
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>
    </div>
  );
};

export default Profile;